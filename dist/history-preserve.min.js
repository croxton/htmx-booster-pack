(function() {
  let cache = {
    now: {},
    next: {}
  };
  function saveToCache(dom, store) {
    let markers = dom.querySelectorAll("[hx-history-preserve]");
    if (markers)
      for (let i = 0; i < markers.length; ++i)
        typeof markers[i].id < "u" && (cache[store][markers[i].id] = markers[i].outerHTML);
  }
  function rotateCache() {
    let prunedCache = {};
    for (let key in cache.now) {
      let el = document.getElementById(key);
      el && (prunedCache[key] = cache.now[key]), el = null;
    }
    cache.now = prunedCache, Object.keys(cache.next).length > 0 && (cache.now = {
      ...cache.now,
      ...cache.next
    }, cache.next = {});
  }
  htmx.defineExtension("history-preserve", {
    init: function() {
      saveToCache(document, "now");
    },
    onEvent: function(name, event) {
      var _a, _b;
      if (name === "htmx:beforeSwap") {
        let incomingDOM = new DOMParser().parseFromString(
          event.detail.xhr.response,
          "text/html"
        );
        incomingDOM && saveToCache(incomingDOM, "next"), incomingDOM = null;
      }
      if (name === "htmx:historyItemCreated" && event.detail.item.content) {
        let cachedDOM = new DOMParser().parseFromString(
          event.detail.item.content,
          "text/html"
        );
        for (let key in cache.now) {
          let el = cachedDOM.getElementById(key);
          el && (el.outerHTML = cache.now[key]), el = null;
        }
        event.detail.item.content = cachedDOM.body.innerHTML, rotateCache();
      }
      if (name === "htmx:historyRestore") {
        let restored = (_b = (_a = event == null ? void 0 : event.detail) == null ? void 0 : _a.item) == null ? void 0 : _b.content;
        if (restored) {
          let restoredDOM = new DOMParser().parseFromString(
            restored,
            "text/html"
          );
          restoredDOM && saveToCache(restoredDOM, "now");
        }
      }
    }
  });
})();
